package code;

/**
 * @author ataryq
 * @version 1.0.0
 * Сервер работает на tcp/ip соединении.
 * Вся обработка информации идет на сервере.
 * 
 * Процесс запуска сервера.
 *   В main() создается и запускается сокет-сервер. Сокет-сервер передается логической части сервера, и запускается методом
 *   Start(). Начинается прослушка порта на наличие подключений клиентов.
 *   Запускается сервер безопасности. Нужен исключительно для flash версии клиента.
 *   При подключении клиента сервер отправляет ему настройки безопасности.
 * 
 * Процесс подключения нового пользователя.
 *   Когда пытается подключиться новое соединение, SocketServer вызывает метод у ServerProcessing AddNewConnection(clientSocket).
 *   ServerProcessing создает нового сокет-клиента(SocketClient) и передает ему объект clientSocket. Затем сервер создает 
 *   логического-клиента(Client) и передает ему сокет-клиента. Теперь обработкой всех сообщений от клиент занимается лог. клиент.
 *   
 *   Процесс Авторизации.
 *     Лог. клиенту приходит запрос авторизации с логином. Запрос на авторизацию посылается в контроллер(Controller), который
 *     запрашивает у лог. сервера авторизация пользователя с указанным логином. Если этот логин не занят другим игроком, то 
 *     пользователь успешно регистрируется и текущее состояние клиента меняется. Теперь клиент сможет запрашивать информацию 
 *     о игроках находящихся в меню, приглашать других и т.д.
 *     
 *   Процесс Приглашения.
 *     Когда пользователя приглашает другой игрок, создается объект игры(ProcessGame). Теперь игра отвечает за дальнейшую 
 *     обработку сообщений от лог. пользователя, до момента пока игра не закончится, или другой игрок не откажет в приглашении.
 *     Если ответ приходит нет, пользователь возвращается в меню поиска, иначе начинается игра.
 *   
 *   Процесс Игры.
 *     Когда клиент отправляет ход, обработку берет на себя игра. Игра отправляет ход на проверку на доску(DescProcessing).
 *     Если доска отвечает, что такой ход возможен производиться ход и клиенту посылается подтверждение о то, что ход корректен и
 *     информацию об удаленных камнях(если есть), очках.
 *     
 *     Проверка хода.
 *       Каждый ход проходит проверку на доске (DescProcessing). Сначала идет проверка возможности хода. Текущее состояние доски
 *       сохраняется и происходит симуляция хода. Если текущее состояние доски совпадает с состоянием, которое было до хода 
 *       этого пользователя, доска восстанавливается и ход отклоняется. Если новый камень убивает свою группу(или себя), 
 *       ход откланяется. Иначе ход считается одобренным. 
 *       Далее происходит сам ход: камень ставиться на доску. Удаляются окруженные камни.
 *     Если были удаленные камни, игрокам отправляются разница между положением доски до хода и после(сделано для экономии трафика).
 *     Текущий ход переходит к другому игроку.
 *     
 *   Процесс окончания игры.
 *     После того как оба игрока сказал пас подряд. 
 *     Когда игрок переходит в меню объект игры удаляется. 
 *     
 *   Список комманд не полный, подробнее смотреть в реализации
 *   login 	- вмество него подставить логин игрока
 *   X, Y 	- позиция камню
 *   p1 	- очки игрока
 *   type 	- тип события
 *   
 *   Список комман, принятие:
 *   	Authorizate:
 *        1_login	- авторизация
 *   	In menu:
 *        _1_substr - вернуть список логинов пользователей содержащих подктроку substr
 *        _2_login	- пригласить пользователя с логином login
 *        _3_1		- согласие на игру
 *        _3_0		- отказ на приглашение
 *        _3_2		- отмена приглашения
 *      ProcessGame:
 *        _1_X;Y	- сделать ход
 *        _2		- пасс
 *      
 *    Список комман, отправление:
 *    	Authorizate:
 *        1_1_0		- отказ, логин занят
 *        1_1_2		- логин меньше минимальной длинны
 *   	In menu:
 *   	  2_3_2		- отмена приглашения
 *        2_1_login1; ... - список логинов игроков в меню
 *        2_2_login - отправить приглашение от login
 *        2_3_1		- начало игры
 *        2_3_0		- отказ от приглашения
 *        
 *      ProcessGame:
 *        3_1_X;Y 	- отправление хода оппонента
 *        3_2		- отправить пасс оппонента
 *        3_3		- конец игры
 *        3_4		- отказ на ход
 *        3_5_1		- одобрение и принятие хода
 *        3_5_0 	- отказ на соершение хода
 *        3_6_X;Y;type...	- послать разницу в состояниях доски
 *        3_7_p1;p2 - очки для обоих игроков
 *        
 *        
 *   		
 *     
 *   
 */
 
